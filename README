Terminology 0.2.0

******************************************************************************

 FOR ANY ISSUES PLEASE EMAIL:
 enlightenment-devel@lists.sourceforge.net

******************************************************************************

Requirements:
-------------

  * elementary 1.1 (1.0.99 SVN latest)
  * eina
  * eet
  * evas 1.3 (1.2.99 SVN latest)
  * ecore
  * edje
  * emotion
  * ecore-imf
  * ecore-imf-evas
  * ecore-input 1.3 (1.2.99 SVN latest)

Please see http://www.enlightenment.org for information on these.

This is an EFL terminal emulator with some extra bells and whistles.
It's brand new and was only started near the begining of June 2012, so
expecting it to do everything a mature terminal emulator does is a bit
premature, but considering it's young age, it does a lot.

Compiling:
----------

Once you have met requirements, compiling and installing is simple:

  ./configure
  make
  make install

Note: to make terminology work with input methods in general you need:

export ECORE_IMF_MODULE="xim"
export XMODIFIERS="@im=none"

Special key controls:

Shift+PgUp = Scroll 1 page up
Shift+PgDn = Scroll 1 page down
Shift+Insert = Paste Clipboard (ctrl+v/c) selection
Shift+Ctrl+Insert = Paste Primary (hilight) selection
Shift+Keypad-Plus = Font size up 1
Shift+Keypad-Minus = Font size down 1
Shift+Keypad-Multiply = Reset font size to 10
Shift+Keypad-Divide = Copy highlight to Clipboard (same as ctrl+c in gui apps)
Ctrl+PgUp = switch focus to previous terminal inside a window
Ctrl+PgDn = switch focus to next terminal inside a window
Ctrl+Shift+t = create new terminal on top of current inside window (tabs) (not implemented)
Ctrl+Shift+PgUp = split terminal horizontally (1 term above the other)
Ctrl+Shift+PgDn = split terminal vertically (1 term to the left of the other)
Alt+Home = Enter command mode (enter commands to control terminology itself)

Command mode commands currently understood:

f = Reset font to default settign saved in config
f+ = Increase fontsize
f- = Decreate fontsize
fb = Display big font size (10x20 bitmap, or size 20 with scalable).
gNxM = make terminal NxM chars in size (if possible). e.g. g80x48 g40x20.
       If just one number is provided, it will use the following shortcuts:
       g0=80x24; g1=80x40; g2=80x60; g3=80x80; g4=120x24; g5=120x40; g6=120x60;
       g7=120x80; g8=120x120
b = reset the background (no media)
bPATH = set the background media to an absolute file PATH

Mouse controls:

Right mouse button = controls menu
Middle mouse button = paste highlight selection
Left mouse button/drag = make highlight
Wheel = scroll up or down in history
Ctrl+Wheel = zoom font size up/down

Extended escapes for terminology only:

[\033][}][COMMAND][\000]
i.e.
  1.   ESC char (\033 or 0x1b)
  2.   } char
  3... sequence of UTF8 chars other than nul (\000 or 0x00).
  4    \000 char (nul byte or 0x00 to indicate end of sequence)
e.g.
  echo -n '\033}Hello world\000'
  
Commands:

any values inside square brackets [] are to be replaced by some
content (numbers, strings, paths, url's etc.). example:

aa[PATH-OF-FILE] should be come something like:
  aa/tmp/file.png
or aa[true/false] should become something like:
  aatrue
or
  aafalse

---

pn[FULL-PATH-OR-URL]
  = popup the given media file/url now

pq[FULL-PATH-OR-URL]
  = quque a popup for the given media file/url

bt[FULL-PATH-OR-URL]
  = set the terminal background media file/url temporarily

bp[FULL-PATH-OR-URL]
  = set the terminal background media file/url permanently

at[on/true/yes/off/false/no]
  = set the terminal alpha state to be on, or off temporarily

ap[on/true/yes/off/false/no]
  = set the terminal alpha state to be on, or off permanently

qs
  = query grid and font size. stdin will have written to it:
    W;H;FW;FH\n
    where W is the width of the terminal grid in characters
    where H is the height of the terminal grid in characters
    where FW is the width of 1 character cell in pixels
    where FH is the height of 1 character cell in pixels

is[CW;H;FULL-PATH-OR-URL]
  = insert STRETCHED media (where image will stretch to fill the cell area)
    and define expected cell area to be W cells wide and H cells high,
    with the image/media/url.
    where C is the replace character to be identified in later text
    where W is the width in character cells (up to 511).
    where H is the height in character cells (up to 511).
    
    note that this escape alone has no effect. it indicates a future
    intention of inserting media into the terminal. the terminal will
    EXPECT a grid of WxH "replace characters" to follow, with each
    sequence of such replace characters bebung with a 'ib' escape command
    and ending with an 'ie' escape command.
    
    example:
    
      printf("\033}is#5;3;%s\000"
             "\033}ib#####\033}ie\n"
             "\033}ib#####\033}ie\n"
             "\033}ib#####\033}ie\n", "/tmp/icon.png");
    
    note that '#' is the replace character, and later '#' chars if inside
    begin/end escapes, will be replaced by the given media indicated
    in the insert media escape.

ic[CW;H;FULL-PATH-OR-URL]
  = insert CENTERED media (centered in cell area). otherwise paramaters are
    identical to the "is" command, but retains aspect and is padded by
    blank space.

if[CW;H;FULL-PATH-OR-URL]
  = insert FILLED media (fill in cell area). otherwise paramaters are
    identical to the "is" command but ensures the entire area is
    filled like a background even if media goes beyond cell bounds and is
    clipped.

it[CW;H;FULL-PATH-OR-URL]
  = insert THUMB media (thumbnail cell area). otherwise paramaters are
    identical to the "is" command, but uses thumbnail generation to
    make a fast to load but low resolution version (cached) of the media.

ib
  = begin media replace sequence run

ie
  = end media replace sequence run
